{"version":3,"sources":["../../src/index.tsx","../../src/useInterval.tsx","App.js","index.js"],"names":["input","config","m","s","h","onDone","recurring","timerDurationInMs","updateState","React","useState","forceUpdate","useCallback","callback","delay","savedCallback","React.useRef","React.useEffect","current","id","setInterval","clearInterval","started","setStarted","paused","setPaused","endTime","setEndTime","remainingDurationInMs","Math","max","diff","stop","reset","add","time","utc","start","Container","children","style","height","width","display","justifyContent","alignItems","flexDirection","border","marginBottom","RecuringTimer","useCountdown","console","warn","format","marginTop","onClick","Timer","App","ReactDOM","render","document","getElementById"],"mappings":"8LAQa,EAAe,SAC1BA,EACAC,QADA,IAAAD,MAAA,SACA,IAAAC,MAAA,IAEQ,MAAwBD,EAAnB,EAALE,OAAC,IAAG,IAAC,EAAE,EAAiBF,EAAZ,EAALG,OAAC,IAAG,IAAC,EAAE,EAAUH,EAAL,EAALI,OAAC,IAAG,IAAC,EACnB,EAAmCH,EAAhB,OAAnBI,OAAM,IAAG,aAAM,UAAI,EAAEC,EAAcL,EAAL,UAChCM,EAAwB,GAAJH,EAAS,GAAK,IAAW,GAAJF,EAAS,IAAW,IAAJC,EAGtDK,EAAeC,IAAMC,WAAV,GACdC,EAAcF,IAAMG,aAAY,WAAM,OAAAJ,EAAY,MAAK,KCjBpC,SAACK,EAAqBC,QAAA,IAAAA,MAAA,KAC/C,IAAMC,EAAgBC,kBAAwB,WAAM,YAGpDC,qBAAgB,WACdF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAgB,WAId,IAAIE,EAAKC,aAHT,WACEL,EAAcG,YAEWJ,GAC3B,OAAO,WAAM,OAAAO,cAAcF,MAC1B,CAACL,IDGJ,EAAY,WAAM,OAAAH,MAAe,KAE3B,MAAwB,oBAAS,GAAhCW,EAAO,KAAEC,EAAU,KACpB,EAAsB,oBAAS,GAA9BC,EAAM,KAAEC,EAAS,KAElB,EAAwB,qBAAvBC,EAAO,KAAEC,EAAU,KAEpBC,EAAwBF,GAAWG,KAAKC,IAAIJ,EAAQK,KAAK,OAAW,GAOpEC,EAAO,WACXT,GAAW,GACXE,GAAU,IAENQ,EAAQ,WACZN,EAAW,MAASO,IAAI3B,EAAmB,kBAiB7C,OAdA,qBAAU,WACJD,GAAuC,IAA1BsB,GACfvB,IACA4B,KACmC,IAA1BL,IACTvB,IACA2B,OAED,CAACJ,IAMG,CACLO,KALWb,EACT,IAAOc,IAAIR,GACX,IAAOQ,IAAI7B,GAIb8B,MA7BY,WACZd,GAAW,GACXE,GAAU,GACVE,EAAW,MAASO,IAAI3B,EAAmB,kBA2B3CyB,KAAI,EACJV,QAAO,EACPE,OAAM,EACNS,MAAK,IEzDT,MAAMK,EAAY,EAAEC,cAClB,yBACEC,MAAO,CACLC,OAAQ,IACRC,MAAO,IACPC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,cAAe,SACfC,OAAQ,kBACRC,aAAc,KAEhBT,GAGEU,EAAgB,KAAO,MAAD,EACIC,EAC5B,CAAE/C,EAAG,IACL,CACEG,WAAW,EACXD,OAAQ,IAAM8C,QAAQC,KAAK,gDAJvBf,EADkB,EAClBA,MAAOF,EADW,EACXA,KAAMH,EADK,EACLA,KAOrB,OACE,kBAACM,EAAD,KACGH,EAAKkB,OAAO,SACb,4BAAQb,MAAO,CAAEc,UAAW,IAAMC,QAASlB,GAA3C,wBAGA,4BAAQG,MAAO,CAAEc,UAAW,IAAMC,QAASvB,GAA3C,UAOAwB,EAAQ,KAAO,MAAD,EACYN,EAC5B,CAAE/C,EAAG,IACL,CACEE,OAAQ,IAAM8C,QAAQC,KAAK,gDAHvBf,EADU,EACVA,MAAOF,EADG,EACHA,KAAMH,EADH,EACGA,KAMrB,OACE,kBAACM,EAAD,KACGH,EAAKkB,OAAO,SACb,4BAAQb,MAAO,CAAEc,UAAW,IAAMC,QAASlB,GAA3C,uBAGA,4BAAQG,MAAO,CAAEc,UAAW,IAAMC,QAASvB,GAA3C,UAwBSyB,MAjBH,IAER,yBACEjB,MAAO,CACLC,OAAQ,QACRC,MAAO,QACPC,QAAS,OACTC,eAAgB,eAChBC,WAAY,WAGd,kBAACI,EAAD,MACA,kBAACO,EAAD,OCnENE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.06b89a28.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport moment, { Moment } from \"moment\";\nimport { useInterval } from \"./useInterval\";\n\nexport type CountdownInput = { m?: number; s?: number; h?: number } | undefined;\nexport type CountdownConfig = { onDone?: () => any; recurring?: boolean };\n\nexport const useCountdown = (\n  input: CountdownInput = {},\n  config: CountdownConfig = {}\n) => {\n  const { m = 0, s = 0, h = 0 } = input;\n  const { onDone = () => true, recurring } = config;\n  const timerDurationInMs = h * 60 * 60 * 1000 + m * 60 * 1000 + s * 1000;\n\n  // timers are tied to re-render unfortunately in react native.\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n  useInterval(() => forceUpdate(), 1000);\n\n  const [started, setStarted] = useState(false);\n  const [paused, setPaused] = useState(false);\n\n  const [endTime, setEndTime] = useState<Moment>();\n\n  const remainingDurationInMs = endTime && Math.max(endTime.diff(moment()), 0);\n\n  const start = () => {\n    setStarted(true);\n    setPaused(false);\n    setEndTime(moment().add(timerDurationInMs, \"milliseconds\"));\n  };\n  const stop = () => {\n    setStarted(false);\n    setPaused(true);\n  };\n  const reset = () => {\n    setEndTime(moment().add(timerDurationInMs, \"milliseconds\"));\n  };\n\n  useEffect(() => {\n    if (recurring && remainingDurationInMs === 0) {\n      onDone();\n      reset();\n    } else if (remainingDurationInMs === 0) {\n      onDone();\n      stop();\n    }\n  }, [remainingDurationInMs]);\n\n  const time = started\n    ? moment.utc(remainingDurationInMs)\n    : moment.utc(timerDurationInMs);\n\n  return {\n    time,\n    start,\n    stop,\n    started,\n    paused,\n    reset,\n  };\n};\n","import * as React from \"react\";\nexport const useInterval = (callback: () => any, delay: number = 1000) => {\n  const savedCallback = React.useRef<() => any>(() => true);\n\n  // Remember the latest callback.\n  React.useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  React.useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    let id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n};\n","import React from \"react\";\n\nimport { useCountdown } from \"use-moment-countdown\";\n\nconst Container = ({children}) => (\n  <div\n    style={{\n      height: 200,\n      width: 200,\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      flexDirection: \"column\",\n      border: \"solid 1px black\",\n      marginBottom: 50\n    }}\n  >{children}</div>\n);\n\nconst RecuringTimer = () => {\n  const { start, time, stop } = useCountdown(\n    { s: 10 },\n    {\n      recurring: true,\n      onDone: () => console.warn(\"You can pass an onDone function like this!\"),\n    }\n  );\n  return (\n    <Container>\n      {time.format(\"mm:ss\")}\n      <button style={{ marginTop: 20 }} onClick={start}>\n        Start Recuring Timer\n      </button>\n      <button style={{ marginTop: 20 }} onClick={stop}>\n        Stop\n      </button>\n    </Container>\n  );\n};\n\nconst Timer = () => {\n  const { start, time, stop } = useCountdown(\n    { s: 10 },\n    {\n      onDone: () => console.warn(\"You can pass an onDone function like this!\"),\n    }\n  );\n  return (\n    <Container>\n      {time.format(\"mm:ss\")}\n      <button style={{ marginTop: 20 }} onClick={start}>\n        Start Regular Timer\n      </button>\n      <button style={{ marginTop: 20 }} onClick={stop}>\n        Stop\n      </button>\n    </Container>\n  );\n};\n\nconst App = () => {\n  return (\n    <div\n      style={{\n        height: \"100vh\",\n        width: \"100vw\",\n        display: \"flex\",\n        justifyContent: \"space-around\",\n        alignItems: \"center\",\n      }}\n    >\n      <RecuringTimer />\n      <Timer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}