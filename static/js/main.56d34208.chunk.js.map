{"version":3,"sources":["../../src/index.tsx","App.js","index.js"],"names":["input","m","s","intervalInMs","React.useState","count","setCount","diff","remainingMilliseconds","duration","asMilliseconds","started","setStart","callback","delay","savedCallback","React.useRef","React.useEffect","current","id","setInterval","clearInterval","time","utc","start","stop","App","useCountdown","style","height","width","display","justifyContent","alignItems","flexDirection","format","marginTop","onClick","ReactDOM","render","document","getElementById"],"mappings":"2NAqBa,EAAe,SAACA,GAEnB,MAAwBA,EAAnB,EAALC,OAAC,IAAG,IAAC,EAAE,EAAiBD,EAAZ,EAALE,OAAC,IAAG,IAAC,EAAE,EAAUF,EAAL,EACrBG,EAAmB,SADF,IAAG,IAAC,GACG,GAAK,IAAW,GAAJF,EAAS,IAAW,IAAJC,EACpD,EAAoBE,mBAAe,GAAlCC,EAAK,KAAEC,EAAQ,KAChBC,EAAOJ,EAAeE,EAEtBG,EADoB,IAAOC,SAASF,EAAM,gBACAG,iBAE1C,EAAsBN,oBAAe,GAApCO,EAAO,KAAEC,EAAQ,KAQxB,OAnCkB,SAACC,EAAqBC,QAAA,IAAAA,MAAA,KACxC,IAAMC,EAAgBC,kBAAwB,WAAM,YAGpDC,qBAAgB,WACdF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAgB,WAId,IAAIE,EAAKC,aAHT,WACEL,EAAcG,YAEWJ,GAC3B,OAAO,WAAM,OAAAO,cAAcF,MAC1B,CAACL,IAcJ,EAAY,WACNH,GAAqC,IAA1BH,GACbF,EAASD,EAAQ,OAElB,KAEI,CACLiB,KAAM,IAAOC,IAAIf,GACjBgB,MAAO,WAAM,OAAAZ,GAAS,IACtBa,KAAM,WAAM,OAAAb,GAAS,MCjBVc,MApBH,KAAO,MAAD,EACcC,EAAa,CAAE1B,EAAG,IAAxCuB,EADQ,EACRA,MAAOF,EADC,EACDA,KAAMG,EADL,EACKA,KACrB,OACE,yBACEG,MAAO,CACLC,OAAQ,QACRC,MAAO,QACPC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,cAAe,WAGhBZ,EAAKa,OAAO,SACb,4BAAQP,MAAO,CAACQ,UAAW,IAAKC,QAASb,GAAzC,SACA,4BAAQI,MAAO,CAACQ,UAAW,IAAKC,QAASZ,GAAzC,UCbNa,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.56d34208.chunk.js","sourcesContent":["import * as React from \"react\";\nimport moment from \"moment\";\n\nconst useInterval = (callback: () => any, delay: number = 1000) => {\n  const savedCallback = React.useRef<() => any>(() => true);\n\n  // Remember the latest callback.\n  React.useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  React.useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    let id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n}\n\nexport const useCountdown = (input: { m?: number; s?: number; h?: number }) => {\n\n  const { m = 0, s = 0, h = 0 } = input;\n  const intervalInMs = h * 60 * 60 * 1000 + m * 60 * 1000 + s * 1000;\n  const [count, setCount] = React.useState(0);\n  const diff = intervalInMs - count;\n  const remainingDuration = moment.duration(diff, \"milliseconds\");\n  const remainingMilliseconds = remainingDuration.asMilliseconds();\n\n  const [started, setStart] = React.useState(false);\n\n  useInterval(() => {\n    if (started && remainingMilliseconds !== 0) {\n      setCount(count + 1000);\n    }\n  }, 1000);\n\n  return {\n    time: moment.utc(remainingMilliseconds),\n    start: () => setStart(true),\n    stop: () => setStart(false),\n  };\n};\n","import React from \"react\";\n\nimport { useCountdown } from \"use-moment-countdown\";\n\nconst App = () => {\n  const { start, time, stop } = useCountdown({ m: 1 });\n  return (\n    <div\n      style={{\n        height: \"100vh\",\n        width: \"100vw\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexDirection: \"column\"\n      }}\n    >\n      {time.format(\"mm:ss\")}\n      <button style={{marginTop: 20}} onClick={start}>Start</button>\n      <button style={{marginTop: 20}} onClick={stop}>Stop</button>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}