{"version":3,"sources":["../../src/index.tsx","App.js","index.js"],"names":["doAfterRender","callback","timeout","setTimeout","clearTimeout","input","config","m","s","h","onDone","recuring","React.useState","count","setCount","started","setStarted","paused","setPaused","start","React.useCallback","stop","reset","diff","remainingMilliseconds","duration","asMilliseconds","shouldReset","isDone","delay","savedCallback","React.useRef","React.useEffect","current","id","setInterval","clearInterval","undefined","time","utc","Container","children","style","height","width","display","justifyContent","alignItems","flexDirection","border","marginBottom","RecuringTimer","useCountdown","console","warn","format","marginTop","onClick","Timer","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d5f41d84.chunk.js","sourcesContent":["import * as React from \"react\";\nimport moment from \"moment\";\n\nconst useInterval = (callback: () => any, delay: number = 1000) => {\n  const savedCallback = React.useRef<() => any>(() => true);\n\n  // Remember the latest callback.\n  React.useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  React.useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    let id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n};\n\nexport type CountdownInput = { m?: number; s?: number; h?: number } | undefined;\nexport type CountdownConfig = { onDone?: () => any; recuring?: boolean };\n\n// doAfterRender to avoid triggering callback such as alert and halting\n// the ui-thread before time hits 0\nconst doAfterRender = (callback: () => any) => {\n  const timeout = setTimeout(() => {\n    callback();\n    clearTimeout(timeout);\n  }, 1);\n};\n\nexport const useCountdown = (\n  input: CountdownInput = {},\n  config: CountdownConfig = {}\n) => {\n  const { m = 0, s = 0, h = 0 } = input;\n  const { onDone = () => true, recuring = false } = config;\n  const [count, setCount] = React.useState(0);\n  const [started, setStarted] = React.useState(false);\n  const [paused, setPaused] = React.useState(false);\n\n  const start = React.useCallback(() => {\n    setPaused(false);\n    setStarted(true);\n  }, []);\n\n  const stop = React.useCallback(() => {\n    setPaused(true);\n    setStarted(false);\n  }, []);\n\n  const reset = React.useCallback(() => {\n    setPaused(false);\n    setCount(0);\n  }, []);\n\n  const intervalInMs = h * 60 * 60 * 1000 + m * 60 * 1000 + s * 1000;\n  const diff = intervalInMs - count;\n\n  const remainingDuration = moment.duration(diff, \"milliseconds\");\n  const remainingMilliseconds = remainingDuration.asMilliseconds();\n\n  const shouldReset = started && remainingMilliseconds === 0 && recuring;\n  const isDone = started && remainingMilliseconds === 0;\n\n  if (!shouldReset && isDone) {\n    doAfterRender(() => {\n      stop();\n      onDone();\n    });\n  }\n\n  useInterval(\n    () => {\n      if (started && !isDone) {\n        setCount(count + 1000);\n      }\n      if (shouldReset) {\n        reset();\n        doAfterRender(() => {\n          onDone();\n        });\n      }\n    },\n    started ? 1000 : undefined\n  );\n\n  return {\n    time: moment.utc(remainingMilliseconds),\n    start,\n    stop,\n    started,\n    paused,\n    reset,\n  };\n};\n","import React from \"react\";\n\nimport { useCountdown } from \"use-moment-countdown\";\n\nconst Container = ({children}) => (\n  <div\n    style={{\n      height: 200,\n      width: 200,\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      flexDirection: \"column\",\n      border: \"solid 1px black\",\n      marginBottom: 50\n    }}\n  >{children}</div>\n);\n\nconst RecuringTimer = () => {\n  const { start, time, stop } = useCountdown(\n    { s: 10 },\n    {\n      recuring: true,\n      onDone: () => console.warn(\"You can pass an onDone function like this!\"),\n    }\n  );\n  return (\n    <Container>\n      {time.format(\"mm:ss\")}\n      <button style={{ marginTop: 20 }} onClick={start}>\n        Start Recuring Timer\n      </button>\n      <button style={{ marginTop: 20 }} onClick={stop}>\n        Stop\n      </button>\n    </Container>\n  );\n};\n\nconst Timer = () => {\n  const { start, time, stop } = useCountdown(\n    { s: 10 },\n    {\n      onDone: () => console.warn(\"You can pass an onDone function like this!\"),\n    }\n  );\n  return (\n    <Container>\n      {time.format(\"mm:ss\")}\n      <button style={{ marginTop: 20 }} onClick={start}>\n        Start Regular Timer\n      </button>\n      <button style={{ marginTop: 20 }} onClick={stop}>\n        Stop\n      </button>\n    </Container>\n  );\n};\n\nconst App = () => {\n  return (\n    <div\n      style={{\n        height: \"100vh\",\n        width: \"100vw\",\n        display: \"flex\",\n        justifyContent: \"space-around\",\n        alignItems: \"center\",\n      }}\n    >\n      <RecuringTimer />\n      <Timer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}